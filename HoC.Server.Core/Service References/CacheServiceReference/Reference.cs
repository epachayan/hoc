//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HoC.Server.CacheServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CacheServiceReference.ICacheService")]
    public interface ICacheService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/RetrieveCacheItem", ReplyAction="http://tempuri.org/ICacheService/RetrieveCacheItemResponse")]
        HoC.Common.ClientCacheItem RetrieveCacheItem(string key);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICacheService/StoreCacheItem")]
        void StoreCacheItem(string key, HoC.Common.ClientCacheItem value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/DoInterNodeObjectTransfer", ReplyAction="http://tempuri.org/ICacheService/DoInterNodeObjectTransferResponse")]
        bool DoInterNodeObjectTransfer(HoC.Common.Node sourceNode, string key, HoC.Common.ServerCacheItem cacheItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/EndInterNodeObjectTransfer", ReplyAction="http://tempuri.org/ICacheService/EndInterNodeObjectTransferResponse")]
        bool EndInterNodeObjectTransfer(HoC.Common.Node sourceNode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/Stop", ReplyAction="http://tempuri.org/ICacheService/StopResponse")]
        bool Stop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/GetCacheHealth", ReplyAction="http://tempuri.org/ICacheService/GetCacheHealthResponse")]
        HoC.Common.CacheHealth GetCacheHealth();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICacheServiceChannel : HoC.Server.CacheServiceReference.ICacheService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CacheServiceClient : System.ServiceModel.ClientBase<HoC.Server.CacheServiceReference.ICacheService>, HoC.Server.CacheServiceReference.ICacheService {
        
        public CacheServiceClient() {
        }
        
        public CacheServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CacheServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CacheServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CacheServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public HoC.Common.ClientCacheItem RetrieveCacheItem(string key) {
            return base.Channel.RetrieveCacheItem(key);
        }
        
        public void StoreCacheItem(string key, HoC.Common.ClientCacheItem value) {
            base.Channel.StoreCacheItem(key, value);
        }
        
        public bool DoInterNodeObjectTransfer(HoC.Common.Node sourceNode, string key, HoC.Common.ServerCacheItem cacheItem) {
            return base.Channel.DoInterNodeObjectTransfer(sourceNode, key, cacheItem);
        }
        
        public bool EndInterNodeObjectTransfer(HoC.Common.Node sourceNode) {
            return base.Channel.EndInterNodeObjectTransfer(sourceNode);
        }
        
        public bool Stop() {
            return base.Channel.Stop();
        }
        
        public HoC.Common.CacheHealth GetCacheHealth() {
            return base.Channel.GetCacheHealth();
        }
    }
}
